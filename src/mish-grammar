// Mish grammar file

// symbol groups

DEFCHAR(la, 'a')
DEFCHAR(lb, 'b')
DEFCHAR(lc, 'c')
DEFCHAR(ld, 'd')
DEFCHAR(le, 'e')
DEFCHAR(lf, 'f')
DEFCHAR(lg, 'g')
DEFCHAR(lh, 'h')
DEFCHAR(li, 'i')
DEFCHAR(lj, 'j')
DEFCHAR(lk, 'k')
DEFCHAR(ll, 'l')
DEFCHAR(lm, 'm')
DEFCHAR(ln, 'n')
DEFCHAR(lo, 'o')
DEFCHAR(lp, 'p')
DEFCHAR(lq, 'q')
DEFCHAR(lr, 'r')
DEFCHAR(ls, 's')
DEFCHAR(lt, 't')
DEFCHAR(lu, 'u')
DEFCHAR(lv, 'v')
DEFCHAR(lw, 'w')
DEFCHAR(lx, 'x')
DEFCHAR(ly, 'y')
DEFCHAR(lz, 'z')
DEFSWITCH(lletters,
		la,lb,lc,ld,le,lf,lg,lh,li,lj,lk,ll,lm,ln,lo,lp,lq,lr,ls,lt,lu,lv,lw,lx,ly,lz)

DEFCHAR(ca, 'A')
DEFCHAR(cb, 'B')
DEFCHAR(cc, 'C')
DEFCHAR(cd, 'D')
DEFCHAR(ce, 'E')
DEFCHAR(cf, 'F')
DEFCHAR(cg, 'G')
DEFCHAR(ch, 'H')
DEFCHAR(ci, 'I')
DEFCHAR(cj, 'J')
DEFCHAR(ck, 'K')
DEFCHAR(cl, 'L')
DEFCHAR(cm, 'M')
DEFCHAR(cn, 'N')
DEFCHAR(co, 'O')
DEFCHAR(cp, 'P')
DEFCHAR(cq, 'Q')
DEFCHAR(cr, 'R')
DEFCHAR(cs, 'S')
DEFCHAR(ct, 'T')
DEFCHAR(cu, 'U')
DEFCHAR(cv, 'V')
DEFCHAR(cw, 'W')
DEFCHAR(cx, 'X')
DEFCHAR(cy, 'Y')
DEFCHAR(cz, 'Z')
DEFSWITCH(cletters,
		ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct,cu,cv,cw,cx,cy,cz)

DEFSWITCH(letters, lletters,cletters)

DEFCHAR(d0, '0')
DEFCHAR(d1, '1')
DEFCHAR(d2, '2')
DEFCHAR(d3, '3')
DEFCHAR(d4, '4')
DEFCHAR(d5, '5')
DEFCHAR(d6, '6')
DEFCHAR(d7, '7')
DEFCHAR(d8, '8')
DEFCHAR(d9, '9')
DEFSWITCH(digits, d0,d1,d2,d3,d4,d5,d6,d7,d8,d9)

DEFCHAR(openpar, '(')
DEFCHAR(closepar, ')')
DEFCHAR(openbrace, '{')
DEFCHAR(closebrace, '}')
DEFCHAR(opensquare, '[')
DEFCHAR(closesquare, ']')
DEFCHAR(opentriangle, '<')
DEFCHAR(closetriangle, '>')
DEFCHAR(tilde, '~')
DEFCHAR(grave, '`')
DEFCHAR(exclamation, '!')
DEFCHAR(at, '@')
DEFCHAR(hash, '#')
DEFCHAR(dollar, '$')
DEFCHAR(percent, '%')
DEFCHAR(carrot, '^')
DEFCHAR(ampersand, '&')
DEFCHAR(asterisk, '*')
DEFCHAR(minus, '-')
DEFCHAR(underscore, '_')
DEFCHAR(plus, '+')
DEFCHAR(equals, '=')
DEFCHAR(pipe, '|')
DEFCHAR(backslash, '\\')
DEFCHAR(forewardslash, '/')
DEFCHAR(singlequote, '\'')
DEFCHAR(doublequote, '"')
DEFCHAR(colon, ':')
DEFCHAR(semicolon, ';')
DEFCHAR(comma, ',')
DEFCHAR(dot, '.')
DEFCHAR(question, '?')
DEFCHAR(space, ' ')
DEFCHAR(tab, '\t')
DEFCHAR(newline, '\n')

DEFSWITCH(whitespace, space,tab,newline)
DEFSWITCH(brackets,
		openpar,closepar,openbrace,closebrace,opensquare,closesquare,opentriangle,closetriangle)
DEFSWITCH(special,
		brackets,tilde,grave,exclamation,at,hash,dollar,percent,carrot,ampersand,asterisk,minus,underscore,plus,equals,pipe,backslash,forewardslash,singlequote,doublequote,colon,semicolon,comma,dot,question,space,tab)

DEFMANY(requirewhitespace, whitespace)
DEFVARIABLE(optionalwhitespace, whitespace)

// symbol
DEFSWITCH(symbolfirstchar, letters,underscore,at)
DEFSWITCH(symbolrestcharoptions, letters,underscore,at,digits)
DEFVARIABLE(symbolrestchar, symbolrestcharoptions)
DEFLITERAL(symbol, N(first, symbolfirstchar),N(rest, symbolrestchar))

// string
DEFLITERAL(escapeddoublequote, N(backslash, backslash),N(doublequote, doublequote))
DEFSWITCH(stringcharacter,
		brackets,tilde,grave,exclamation,at,hash,dollar,percent,carrot,ampersand,asterisk,minus,underscore,plus,equals,pipe,backslash,forewardslash,escapeddoublequote,singlequote,colon,semicolon,comma,dot,question,space,tab)
DEFVARIABLE(stringcontents, stringcharacter)
DEFLITERAL(stringliteral, N(startquote, doublequote),N(content, stringcontents),N(endquote, doublequote))

// numbers
DEFMANY(manydigits, digits)
// integer
DEFLITERAL(integerliteral, N(digits, manydigits))
// decimal
DEFLITERAL(decimalliteral, N(wholedigits, manydigits),N(dot, dot),N(decimaldigits, manydigits))
// hex
DEFSWITCH(hexcontents, digits,la,ca,lb,cb,lc,cc,ld,cd,le,ce,lf,cf)
DEFLITERAL(hexliteral, N(zero, d0),N(x, lx), N(digits, hexcontents))

// expression
DEFSWITCH(literal, integerliteral,decimalliteral,hexliteral)
FDEF(expression)
DEFLITERAL(subexpression, N(openpar, openpar),N(wsp0, optionalwhitespace),N(expression, expression),N(wsp1, optionalwhitespace),N(closepar, closepar))
DEFSWITCH(expression, literal, subexpression)

// definition
DEFLITERAL(defkeyword, N(d, ld), N(e, le),N(f, lf))
DEFLITERAL(define, N(def, defkeyword),N(wsp0, requirewhitespace), N(type, symbol), N(wsp1, requirewhitespace), N(variable, symbol))
// assign
DEFLITERAL(assign, N(variable, symbol),N(equals, equals),N(expression, expression))
// define and assign
DEFLITERAL(defassign, N(define, define),N(equals, equals), N(expression, expression))

// command
DEFSWITCH(command, define,assign,defassign)

// body
DEFSWITCH(commandterm, requirewhitespace,semicolon)
DEFLITERAL(bodycommand, N(command, command), N(term, commandterm))
DEFVARIABLE(body, bodycommand)

// block
DEFLITERAL(block, N(openbrace, openbrace), N(wsp0, optionalwhitespace), N(body, body), N(closebrace, closebrace))
