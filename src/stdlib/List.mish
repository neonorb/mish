sming object List<Item> {
	object SingleItemModification<Item> {
		Integer index
		Item item
	}
	
	object MultipleItemModification<Item> {
		Integer index
		List<Item> items
	}
	
	Integer size
	
	==== get ====
	
	====
	Item item = list[index]
	====
	function getAt Integer index(range=[0..size)) -> Item : native
	
	==== add ====
	
	====
	list << item
	====
	function addItem Item item : native
	
	====
	list << otherList
	====
	function addItems List<AddItem extends Item> items(size=[0..(size:range.max-size)]) {
		for (AddItem addItem : items) {
			add(addItem)
		}
	}
	
	====
	list[index] << item
	====
	function insertAt SingleItemModification<Item> mod(index:range=[0..size], items:range) : native
	
	====
	list[index] << otherList
	====
	function insertItemsAt MultipleItemModification<Item> mod(index.range=[0..size]) {
		Integer index = mod.index
		for (Item item : mod.items) {
			addAt { index=index; item=item }
			index++
		}
	}
	
	==== remove ====
	
	removeItem Item item : native
	
	====
	list[index] >>
	Item item = list[index] >>
	====
	function removeAt Integer index -> Item : native
	
	==== set ====
	
	====
	list[index] = item
	====
	function setAt SingleItemModification<Item> mod : native
	
	====
	list[index] = items
	====
	function setItemsAt MultipleItemsModification<Item> mod {
		Integer index = mod.index
		for (Item item : mod.items) {
			setAt { index=index; item=item }
			index++
		}
	}
	
	====
	list = otherList
	====
	function setAllItems List<AddItem extends Item> items {
		clear()
		addItems(items)
	}
}