smingobject List<Item> : Iteratable<Item> {
	object SingleItemModification<Item> {
		def Integer index
		def Item item
	}
	
	object MultipleItemModification<Item> {
		def Integer index
		def List<Item> items
	}
	
	contract ListContainsCount[Item] {
	    def Integer count
	}
	
	contract ListContains[Item] {}
	
	def Integer(
		set requires caller List
	) size = 0
	
	==== query ====
	
	====
	def Item item = list[index]
	====
	def Function<Item, Integer(
		@::range = [0..size)
	)>(
		asserts ListContains[@.out]
	) getAt = NATIVE
	
	def Function<PositiveInteger, Item>(
		asserts ListCountainsCount[@.in] {
			count = @.out
		}
	) count = {
		def Item searchingFor = @
		def Integer count = 0
		loop this {
			if @ is searchingFor {
				count++
			}
		}
		return count
	}
	
	def Function<Boolean, Item> (
		if @.out {
			asserts ListCountains[@.in]
		} else {
			asserts !ListCountains[@.in]
		}
	) contains = {
		return count: @ > 0
	}
	
	iterator = {
		return {
			def Integer index = 0
			
			hasNext = {
				return index+1 < size
			}
			
			next = {
				index++
				return getAt index
			}
		}
	}
	
	==== mutate ====
	
	====
	list << item
	====
	def Function<Void, Item>(
		invoke (size+1).in: size::range
	) addItem = NATIVE
	
	====
	list << otherList
	====
	def Function<Void, List<AddItem extends Item>(
		@.size::range = [0..(size::range.max-size)]
	)> addItems = {
		loop @ {
			add: @
		}
	}
	
	====
	list[index] << item
	====
	def Function<Void, SingleItemModification<Item>(
		@.index::range = [0..size]
	)> insertAt = NATIVE
	
	====
	list[index] << otherList
	====
	def Function<Void, MultipleItemModification<Item>(
		@.in.index.range in [0..size]
		@.in.items.size in [0..(&size.range.max-size)]
	)> addItemsAt = {
		def Integer index = @.index
		loop @.items {
			addAt: { index=:index; item=@ }
			index++
		}
	}
	
	def Function<Void, Item>(
		requires (ListContainsCount[@.in].count > 0) | ListContains[@.in]; 
		asserts !ListContains{ item=@.in };
		asserts ListContains[@.in].count--;
	) removeItem = NATIVE
	
	====
	list[index] >>
	Item item = list[index] >>
	====
	def Function<Item, Integer(
		requires range in [0..size)
	)> removeAt = NATIVE
	
	====
	list[index] = item
	====
	def Function<Void, SingleItemModification<Item>(
		requires @.in.index in [0..size)
	)> setAt = NATIVE
	
	====
	list[index] = items
	====
	def Function<Void, MultipleItemsModification<Item>(
		requires @.in.index in [0..size)
		requires @.in.items.size in [0..(size-@.in.index))
	)> setItemsAt = {
		def Integer index = @.index
		loop @.items {
			setAt: { index=:index; item=@ }
			index++
		}
	}
	
	====
	list = otherList
	====
	def Function<Void, List<AddItem extends Item>> setAllItems = {
		clear: VOID
		addItems: items
	}
}